============================================================
Nullary rule
============================================================

rule() :- fact().

---

(program
  (monotonic_rule
    head: (atom relation: (qualified_name (ident)))
    body:
      (disjunction
        (conjunction (atom relation: (qualified_name (ident)))))))

============================================================
Nullary negation
============================================================

rule() :- !rule().

---

(program
  (monotonic_rule
    head: (atom relation: (qualified_name (ident)))
    body:
      (disjunction
        (conjunction
          (negation)
          (atom relation: (qualified_name (ident)))))))

============================================================
Binary conjunction
============================================================

rule(X) :- foo(X), bar(Y).

---

(program
  (monotonic_rule
    head:
      (atom
        relation: (qualified_name (ident))
        argument: (argument (variable (ident))))
    body:
      (disjunction
        (conjunction
          (atom
            relation: (qualified_name (ident))
            argument: (argument (variable (ident))))
          (atom
            relation: (qualified_name (ident))
            argument: (argument (variable (ident))))))))

============================================================
Ternary conjunction
============================================================

rule(X) :- foo(X1), bar(Y1), baz(Z1).

---

(program
  (monotonic_rule
    head:
      (atom
        relation: (qualified_name (ident))
        argument: (argument (variable (ident))))
    body:
      (disjunction
        (conjunction
          (atom
            relation: (qualified_name (ident))
            argument: (argument (variable (ident))))
          (atom
            relation: (qualified_name (ident))
            argument: (argument (variable (ident))))
          (atom
            relation: (qualified_name (ident))
            argument: (argument (variable (ident))))))))

============================================================
Binary disjunction
============================================================

rule(X, Y) :- foo(X); bar(Y).

---

(program
  (monotonic_rule
    head:
      (atom
        relation: (qualified_name (ident))
        argument: (argument (variable (ident)))
        argument: (argument (variable (ident))))
    body:
      (disjunction
        (conjunction
          (atom
            relation: (qualified_name (ident))
            argument: (argument (variable (ident)))))
        (conjunction
          (atom
            relation: (qualified_name (ident))
            argument: (argument (variable (ident))))))))

============================================================
Parenthesized binary disjunction
============================================================

rule(X, Y) :- (foo(X); bar(Y)).

---

(program
  (monotonic_rule
    head:
      (atom
        relation: (qualified_name (ident))
        argument: (argument (variable (ident)))
        argument: (argument (variable (ident))))
    body:
      (disjunction
        (conjunction
          (disjunction
            (conjunction
              (atom
            relation: (qualified_name (ident))
            argument: (argument (variable (ident)))))
            (conjunction
              (atom
            relation: (qualified_name (ident))
            argument: (argument (variable (ident))))))))))

============================================================
Range rule
============================================================

rule(X) :- X = range(0,3).

---

(program
  (monotonic_rule
    head:
      (atom
        relation: (qualified_name (ident))
        argument: (argument (variable (ident))))
    body:
      (disjunction
        (conjunction
          (comparison
            left:
              (argument (variable (ident)))
            right:
              (argument
                (aggregator
                  (range
                    low: 
                      (argument (constant (number (integer (decimal)))))
                    high: 
                      (argument (constant (number (integer (decimal)))))))))))))

============================================================
Query plan
============================================================

rule(X) :- rule(X).
.plan 0:(0)

---

(program
  (monotonic_rule
    head:
      (atom
        relation: (qualified_name (ident))
        argument: (argument (variable (ident))))
    body:
      (disjunction
        (conjunction
          (atom
            relation: (qualified_name (ident))
            argument: (argument (variable (ident))))))
    plan:
      (query_plan)))

============================================================
Contains
============================================================

rule() :- contains(x, y).

---

(program
  (monotonic_rule
    head: (atom relation: (qualified_name (ident)))
    body:
      (disjunction
        (conjunction
          (contains
            (argument (variable (ident)))
            (argument (variable (ident))))))))

============================================================
Rule for built-in (TODO(#10))
============================================================

log(x) :- exp(x).

---

(program
  (fact
    (atom
      (qualified_name (ident))
      (argument (variable (ident))))
      (ERROR (argument (functor_call (intrinsic_functor) (argument (variable (ident))))))))

